// <auto-generated />
using System;
using Gs1XmlTransfer.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gs1XmlTransfer.Migrations
{
    [DbContext(typeof(Gs1CatalogueContext))]
    partial class Gs1CatalogueContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Gs1XmlTransfer.Models.HierarchicalWithdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CatalogueItemStateCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CreationDateTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DataSource")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DocumentStatusCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("EntityIdentification")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Gln")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Gtin")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("HierarchyDeletionReasonCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TargetMarketCountryCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("WithdrawalMessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WithdrawalMessageId");

                    b.ToTable("HierarchicalWithdrawal", "GS1");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalTradeItemIdentification")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("AdditionalTradeItemIdentificationAdditionalTradeItemIdentificationTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("AllergenSpecificationAgency")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("AllergenSpecificationName")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("AllergenTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("BrandName")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CatalogueItemStateCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CommunicationChannelCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CommunicationValue")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("ContactTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DataCarrierTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DataRecipient")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Depth")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DepthMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DescriptionShort")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DescriptionShortLanguageCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DoesTradeItemContainPesticide")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DutyFeeTaxAgencyCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DutyFeeTaxTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("EffectiveDateTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("FunctionalName")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("FunctionalNameLanguageCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Gln")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("GpcCategoryCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("GrossWeight")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("GrossWeightMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Gtin")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Height")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("HeightMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("ImportClassificationTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("ImportClassificationValue")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IngredientStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientStatementLanguageCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsBasePriceDeclarationRelevant")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsDangerousSubstance")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsHomogenised")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsPackagingMarkedReturnable")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsPriceOnPack")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsRegulatedForTransportation")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsTradeItemABaseUnit")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsTradeItemAConsumerUnit")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsTradeItemADespatchUnit")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsTradeItemAVariableUnit")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsTradeItemAnInvoiceUnit")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsTradeItemAnOrderableUnit")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("LastChangeDateTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("LevelOfContainmentCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("MeasurementPrecisionCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("MinimumTradeItemLifespanFromTimeOfArrival")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("MinimumTradeItemLifespanFromTimeOfProduction")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NetContent")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NetContentMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NetWeight")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NetWeightMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("NutrientTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("OpenedTradeItemLifespan")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("OrganicTradeItemCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("PackagingTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("PartyName")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("PreparationStateCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("PublicationDateTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("QuantityContained")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("QuantityContainedMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("SDSSheetNumber")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("ServingSize")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("ServingSizeMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("StartAvailabilityDateTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TargetMarketCountryCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TradeItemDateOnPackagingTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TradeItemMarketingMessage")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TradeItemMarketingMessageLanguageCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TradeItemUnitDescriptorCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Width")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("WidthMeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("Item", "GS1");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreationDateTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DocumentStatusCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("EntityIdentification")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Gln")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IsReload")
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("NotificationMessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationMessageId");

                    b.ToTable("Notification", "GS1");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.NotificationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreationDateAndTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("EntityIdentification")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gln")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("HeaderVersion")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("IdentifierAuthority")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("InstanceIdentifier")
                        .HasColumnType("varchar(8000)");

                    b.Property<DateTime>("RTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Standard")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TypeVersion")
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.ToTable("NotificationMessage", "GS1");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.NutrientDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementPrecisionCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("MeasurementUnitCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NutrientTypeCode")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("QuantityContained")
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("NutrientDetail", "GS1");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.WithdrawalMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreationDateAndTime")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HeaderVersion")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("InstanceIdentifier")
                        .HasColumnType("varchar(8000)");

                    b.Property<DateTime>("RTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Standard")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TypeVersion")
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.ToTable("WithdrawalMessage", "GS1");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.HierarchicalWithdrawal", b =>
                {
                    b.HasOne("Gs1XmlTransfer.Models.WithdrawalMessage", null)
                        .WithMany("HierarchicalWithdrawals")
                        .HasForeignKey("WithdrawalMessageId");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.Item", b =>
                {
                    b.HasOne("Gs1XmlTransfer.Models.Notification", null)
                        .WithMany("Items")
                        .HasForeignKey("NotificationId");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.Notification", b =>
                {
                    b.HasOne("Gs1XmlTransfer.Models.NotificationMessage", null)
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationMessageId");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.NutrientDetail", b =>
                {
                    b.HasOne("Gs1XmlTransfer.Models.Item", null)
                        .WithMany("NutrientDetails")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.Item", b =>
                {
                    b.Navigation("NutrientDetails");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.Notification", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.NotificationMessage", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Gs1XmlTransfer.Models.WithdrawalMessage", b =>
                {
                    b.Navigation("HierarchicalWithdrawals");
                });
#pragma warning restore 612, 618
        }
    }
}
